#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

const command = process.argv[2];
const args = process.argv.slice(3);

switch (command) {
  case 'setup':
    // Run setup
    const setup = spawn('node', [path.join(__dirname, 'rose-setup.js'), ...args], {
      stdio: 'inherit'
    });
    setup.on('exit', code => process.exit(code));
    break;

  case 'update':
    // Run update
    const update = spawn('node', [path.join(__dirname, 'rose-update.js'), ...args], {
      stdio: 'inherit'
    });
    update.on('exit', code => process.exit(code));
    break;

  case '--version':
  case '-v':
    console.log('Terminal Buddy v2.1.2 ğŸ‘¤');
    break;

  case '--help':
  case '-h':
  case undefined:
    console.log(`
ğŸ‘¤ Terminal Buddy - AI-powered terminal command assistant

Usage:
  termbuddy setup         Run initial setup (choose AI provider, enter API key)
  termbuddy update        Update Terminal Buddy to the latest version
  termbuddy <request>     Generate a command from natural language
  tb setup                Shorthand command (same as above)
  tb <request>            Shorthand for command generation

  Aliases: termbuddy, tb, rose (legacy)

  --version               Show version
  --help                  Show this help

Terminal Integration:
  Type :: followed by your request to generate commands with AI
  Example: :: update system packages

  Type ::: to browse command history for the current directory
  Example: ::: docker   (filters history for docker commands)

  Commands appear in your terminal buffer - press Enter to execute.
`);
    break;

  default:
    // Generate command from natural language
    const generator = spawn('node', [path.join(__dirname, 'rose-generate.js'), ...process.argv.slice(2)], {
      stdio: 'inherit'
    });
    generator.on('exit', code => process.exit(code));
    break;
}
